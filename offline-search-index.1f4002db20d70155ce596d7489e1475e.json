











































[{"body":"Our Mission Now’s your chance to bring your app idea to life. Our free, open source platform makes it easy to create end-to-end encrypted apps that are surveillance-free and private by design — no backend infrastructure required. Our entire community is here to help you build, launch and monetize an amazing app experience for your customers.\nWhy should I trust you (The @ Company) and your systems? Trust certainly has to be earned, so we have started with an open protocol specification and an open source reference implementation for the full stack platform that everyone can evaluate and contribute to. As a company, the only thing we are uniquely responsible for is the integrity of the namespace, which does not hold any private information.\nThe only thing that we have centralized is the verified location of where to go to request permission for access to information from someone. Our basis for trust in our company and the systems and services we provide relies on the fact that we do not have access by any means to anyone’s private data.\nWhat makes the @platform secure? We do not want to be the Google of identity. We want each person to be able to own and control access to their own data. The first principle for us is:\n“It is provably true that The @ Company cannot access your private information without your explicit permission.”\nThe owners of @signs hold the keys for both access and encryption, and nobody else—including The @ Company—has access to them. Thus, only two entities in the universe — the entity that shares information and the entity that receives it — can access private information that is shared between them.\nWhat’s to prevent a malicious app from misusing the data produced through my app? Our strategy for preventing a malicious app from screwing with data at the moment is to review and certify applications to eliminate such behavior. We also have an ambition to automate the process as much as we can. We are currently evaluating how to control app level access (read and write) to data using a namespace convention, which is already a part of the @protocol spec and reference implementation.\nWho would you regard as your main competitors and how are you different? Notionally the blockchain cohort making similar claims would be the main ones, but we believe that they are more likely to become adopters over time to provide non-repudiation and to eliminate username/password authentication which has proven to be so risky. Technically, Solid/Inrupt is somewhat similar with their data pods, but they curiously have no built-in encryption at all and are enterprise focused where we are developer/apps/consumer focused.\nWhat is the @platform? What is the underlying tech stack? Can I build a desktop app on the @platform? What is an @sign? ","categories":"","description":"Have a question revolving around the @platform? Here you will find those answers!\n","excerpt":"Have a question revolving around the @platform? Here you will find …","ref":"/docs/faqs/about/","tags":"","title":"About the @Platform"},{"body":"If you have gone through the steps of setting up the virtual environment and wish to learn how to implement a few common verbs and methods of the @platform, we highly recommend walking through the at_hello_world application.\nBelow, you can see a small demonstration of how the at_hello_world application works.\n tl;dr  Overview too long for you? Watch the  Tyler Time episode that covers this instead!  Overview of the at_hello_world app The at_hello_world application is a bit of a misnomer. Beyond the fact that this app does a lot more than printing “Hello World!” on the console of your IDE, if you lift its hood, you’ll find a tremendous amount of stuff going on (tracing all the functions called in the server_demo_service.dart file will get you several abstraction layers deep into the @protocol!). By no means do you have to understand everything that is happening behind the scenes in the at_hello_world application, but it’ll definitely help to grasp the basics.\nJust like the rest of the @platform, all of our demo applications are open source! Feel free to download the at_hello_world code from our GitHub repository here!\nUpon downlaoding and booting up the app on an emulator, you are met with the Login screen where you can login after selecting a testable @sign to authenticate with from the dropdown menu.\nAfter successfully authenticating, you will be taken to the home screen where you will see three separate boxes which house the three main functons of the at_hello_world app.\nThe Three Main Functions of the at_hello_world app Update The update section as you may see within the code, actually only involves a single if statement (to ensure information is actually passed!) and four lines of code within it!\n_update() async { if (_key != null \u0026\u0026 _value != null) { AtKey pair = AtKey(); pair.key = _key; pair.sharedWith = atSign; await _serverDemoService.put(pair, _value); } } Above is the entirety of the update function! The “pair” variable in the first line of the if statement is something that you will see in all @platform applications. The @protocol interprets keys as AtKey objects, which have several attributes like “key”, “metadata”, and “sharedBy” that help the backend understand what to do with them.\nIn the code snippet above, we are calling the “key” attribute to add a string that will be paired to a value and the “sharedWith” attribute to define with whom we are sharing this AtKey-value pair. If we’d like to store “hello” and “world” on @bob’s secondary server, we would set pair.key to “hello” and pair.sharedWith to “@bob”. This latter detail may be a bit odd: Bob is sharing this AtKey object with himself so that he can access it! We’ll visit later use cases of sharing AtKey-value pairs with other @signs in the advanced @platform verbs section.\nFollowing up with our “hello” and “world” example, the final step in the _update function is to call the “put” verb from the _serverDemoService object with “pair” as the AtKey instance and “world” as the corresponding value (which should just be a string). When the verb executes successfully, you will have put the “hello” and “world” key-value pair into @bob’s secondary server!\nWhile this is certainly an impressive feat (after all, these few seemingly unassuming lines of code uniquely encrypts the key-value pair to @bob’s secondary server and makes it persist), we’re still limited by the fact that we can’t retrieve key-value pairs from a secondary server. In the @protocol, retrieving key-value pairs takes two steps: scanning the relevant secondary server for AtKey objects, and getting the value associated with a scanned AtKey object.\nScan Now that we’ve “put” information on our secondary, we’d now like to retrieve that key in order to read the information associated with it. In order to display values that we’ve stored, we first need to scan a secondary server for relevant AtKey objects (i.e. those that belong to the “namespace” of the application) and retrieve the values corresponding to those AtKeys.\n_scan() async { List\u003cAtKey\u003e response = await _serverDemoService.getAtKeys( sharedBy: atSign, ); if (response.length \u003e 0) { List\u003cString\u003e scanList = response.map((atKey) =\u003e atKey.key).toList(); setState(() =\u003e _scanItems = scanList); } } The only @protocol verb we’re calling in this snippet is “getAtKeys()”. This verb is an incredibly robust function that can gather and sort AtKeys on a secondary server based on things like who shared those AtKeys (the “sharedBy” optional argument) and regular expressions (e.g. the namespace of the application). Because the at_hello_world app is a special case where we only share AtKey objects with ourselves, we can simply call getAtKeys with the “sharedBy” argument set to our own @sign (i.e. widget.atSign). This will return a List of the AtKey objects we want.\nOnce you get that List of AtKeys, you’re pretty much finished! In the at_hello_world, because we want to display keys as strings, we call the “map” method on the List of AtKeys to create a new list that just contains the “key” attribute of each AtKey object. In the last line of code, we call “setState” so that the app loads the newly populated list of keys in the DropdownButton widget.\nLookup An individual on the at_hello_world app is given a list of keys, and they select one (_lookupKey) to find its corresponding value. How do we do this? The answer lies in the _lookup function of the HomeScreen class:\n_lookup() async { if (_lookupKey != null) { AtKey lookup = AtKey(); lookup.key = _lookupKey; lookup.sharedWith = atSign; String response = await _serverDemoService.get(lookup); if (response != null) { setState(() =\u003e _lookupValue = response); } } } In the first line of the if statement, we are creating a new AtKey object called “lookup.” The reason for this is we need a dummy AtKey object that can be passed into the @protocol for looking up the correct value. For the at_hello_world app, this dummy AtKey just needs its “key” and “sharedWith” attributes populated before it can be passed into the “get” verb.\n(If you think creating a copy of an AtKey object is a hassle, that’s totally valid! In a typical @platform application, you have the _scan and _lookup functions merged to some degree so that you can just pass in the AtKey objects we retrieved with the “getAtKeys” verb to the “get” verb. The point of having two separate functions in the at_hello_world project is to define the “scanning” and “getting” steps more concretely).\n“Get” is a very straightforward verb: it gets the value corresponding to a specified AtKey!\nOnce we retrieve the value paired with the “lookup” AtKey, all that’s left is calling “setState” to display the “_lookupValue” on screen.\n","categories":"","description":"Not sure where to start? Take a look at our at_hello_world app to see how some of the common verbs and methods of the @protocol are applied and implemented!\n","excerpt":"Not sure where to start? Take a look at our at_hello_world app to see …","ref":"/docs/sample-apps/at_hello_world/","tags":"","title":"at_hello_world"},{"body":"First, why is there a virtual environment to set up and what does it do? Jumping directly into the deep-end and creating projects on top of the @platform can be overwhelming for some. To combat this overwhelming feeling, we’ve created a simple way to have you, the developer, run the @protocol from your very own machine!\nThis will allow you to run both a root server and secondary servers of testable @signs. As a way to ease you into developing on the @platform, we have created demo applications that go over specific verbs/methods that exist.\nSetup Virtual Environment   Windows      macOS      Linux     Windows Though, your machine’s BIOS already may have virtualization enabled, you can check here.\nNote Please ensure that you have Docker up and running before you proceed.  Loopback adapter\nInstall the Microsoft loopback adapter and configure it. The video showing how to do that is here:\n Start up the at_virtual_enviroment\nRun cmd and enter the following commands. You can run cmd by using the windows key and the r key then typing cmd.\nmkdir ve cd ve curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml Now you are ready to spin up the docker containers:\ndocker-compose up -d Okay, you’re up. Now you can check the http://localhost:9001/.\nNot sure what to do now? Try here!\nMacOS Configure Network Adapter Open the Terminal window and enter this command. This permanently puts the Virtual IP address in place. You only need to run this once!\nsudo curl -L atsign.dev/curl/atloop.plist -o /Library/LaunchDaemons/atloop.plist \u0026\u0026 \\ Once you enter the above command, an arrow “\u003e” should show up to enter the next line:\nsudo launchctl load /Library/LaunchDaemons/atloop.plist The command line may ask you to enter your password. Go ahead and fill it in if this happens.\nStart up the Virtual Environment Make a new directory called “ve” and run the curl command inside of it:\nmkdir ve cd ve curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml Now you are ready to spin up the docker containers:\ndocker-compose up -d Not sure what to do now? Try here!\nLinux Configure Network Adapter\nNote Please ensure that you have Docker up and running before you proceed.  Open the Terminal window and enter this command. This permanently puts the Virtual IP address in place. You only need to run this once!\ncurl -L atsign.dev/curl/rc.local -o setvip.sh sudo ip addr add 10.64.64.64/32 dev lo sudo nano /etc/rc.local If the file “/etc/rc.local” is empty, then add the contents of the file “setvip.sh” to /etc/rc.local”. If rc.local already has content, then add the line “ip addr add 10.64.64.64/32 dev lo” above any lines that say “exit 0”. This will ensure that the virtual IP is in place even after a reboot. Ensure the permissions are correct with the following command:\nsudo chmod 744 /etc/rc.local Start up the Virtual Environment\nMake a new directory called “ve” and run the curl command inside of it:\ncd ~ mkdir ve cd ve curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml Now you are ready to spin up the docker containers:\ndocker-compose up -d Okay, you’re up. Now you can check the http://localhost:9001/.\nNot sure what to do now? Try here!\nTo Pull Latest Virtual Environment Version docker-compose down docker-compose pull docker-compose up -d Congratulations! You’ve set up your virtual environment and can now experiment with the hello_world app. Now you can start building your very own privacy-conscious apps.\nWhen writing code, the only change needed to run in the virtual environment is changing the ROOT_DOMAIN to point to vip.ve.atsign.zone. The production value is root.atsign.org.\nWhere should I go next? Give your users next steps from the Overview. For example:\n Sample Apps: See apps that show off the power of the @platform on your own machine!  ","categories":"","description":"This page displays the proper steps in which developers can follow to successfully create and run their own virtual enviornment to utilize the @platform on their own machine.\n","excerpt":"This page displays the proper steps in which developers can follow to …","ref":"/docs/get-started/the-virtual-environment/","tags":"","title":"Setup the Virtual Environment "},{"body":"Coming soon! The @team will be making an annoucement once these are ready for consumption. ","categories":"","description":"Everything you need to build your app and go-to-market quickly!\n","excerpt":"Everything you need to build your app and go-to-market quickly!\n","ref":"/dev_tools/tt/","tags":"","title":"Tools \u0026 Templates"},{"body":"This application contains private data either created by you or created by others and shared with you. It also may contain data that you or others have chosen to share publicly.\nAfter being encrypted, this data is sent to a cloud server that provides backup and synchronization with other devices. But don’t worry — since the keys to this data remain on your device, whoever runs this cloud server won’t be able to access any data that you have not set as public.\nIn other words, all private data belongs to its creator, and can only be accessed by those with permission to view it. Nobody else, including us, can access any of this private data, resulting in:\n No surveillance No snooping No monetization of data  Remember, the data that you share publicly is public and therefore accessible to anyone, so take care with what you choose to share openly.\nWelcome to a new way of thinking about data ownership and privacy. Regardless of how you choose to share it, your data should — and will — always belong to you.\nHow’s that for a privacy policy?\n","categories":"","description":"\nIf you need help adding a privacy policy to your apps built on the @platform,here is draft template for you to get started.\n","excerpt":"\nIf you need help adding a privacy policy to your apps built on the …","ref":"/dev_tools/tt/app-privacy-policy/","tags":"","title":"App Privacy Policy"},{"body":"Data Caching \u0026 Encryption Data that others have shared with an @sign owner is cached on the @sign owner’s device’s local keystore if permitted.\nLearn more\nNotification Learn more\nOnboarding Learn more\nPeer-to-Peer Streams Learn more\nPersistence Learn more\nSynchronization Learn more\n","categories":"","description":"Here you will find a list of some of the most important services of the @platform. If you'd like to read up more on how the @protocol works under the hood, this is the page to be on!\n","excerpt":"Here you will find a list of some of the most important services of …","ref":"/docs/functional_architecture/services/","tags":"","title":"Services"},{"body":"Episode 1: Coding the Hello World Application on the @ platform    Episode 2: Coding the at_chats application on the @ platform    Episode 3: The @ platform at_cookbook walkthrough    Episode 4: Setting up the @platform Virtual Environment on MacOS \u0026 Windows    Episode 5: Onboarding Production Level @signs with the Hello World App on the @ platform    Coming Soon : New Episodes! ","categories":"","description":"At The @ Company, we have been really lucky with anyone named Tyler - [Tyler Trott](https://www.linkedin.com/in/tyler-t-b307b0107/) and [Tyler McNierney](https://www.linkedin.com/in/tyler-mcnierney/) are two of our awesome student ambassadors and techonology consultants who have made the company a better place besides making great tutorials about the @platform.\n","excerpt":"At The @ Company, we have been really lucky with anyone named Tyler - …","ref":"/docs/resources/tylertime/","tags":"","title":"Tyler Time ⏰"},{"body":"The at_chat_flutter widget offers a messaging experience that is unique to the @platform. In a traditional messaging application, your texts are stored in a remote database and the person you’re pinging pulls the texts from there (a bit unsettling if you think about it). Of course, there is no such thing as a remote database in the @platform, so we had to be a bit clever coming up with a messaging scheme. In a nutshell, your text messages are not “sent” but rather “shared” with another @sign. All your texts are stored securely in your secondary server and never leave; if you decide to send a message to someone, that person is given permission to view that text via the notify verb, which will be covered in the next section on advanced @platform verbs.\nBelow, you can see a small demonstration of how the at_hello_world application works.\n tl;dr  Overview too long for you? Watch the  Tyler Time episode that covers this instead!  Overview of the at_chats app Although this messaging dynamic might sound a bit involved, set up is quite easy! To get a feel for using the “Chatting” widget, it’s best to follow along with the at_chats demo application.\nThe general flow of all @platform widgets is onboarding an @sign =\u003e initializing the service object =\u003e creating the actual widgets. Assuming we’ve already onboarded an @sign, let’s look at the steps to initialize our chat service:\n(The following code snippets are taken directly from at_chats. While there will be explanations, don’t worry too much about all the variables!)\ngetAtSignAndInitializeChat() async { /// In the at_chats app, the onboarded @sign is displayed at the top  /// of the Second Screen. We set that @sign to [currentAtSign].  String currentAtSign = await clientSdkService.getAtSign(); /// Set [activeAtSign], which is the variable that gets displayed, to  /// [currentAtSign] using setState(() {}).  setState(() { activeAtSign = currentAtSign; }); /// Initialize a List of Strings called [allAtSigns] that we will  /// eventually display in the dropdown on the Second Screen. Here, we  /// simply pull an existing List from the at_demo_data dependency.  List\u003cString\u003e allAtSigns = at_demo_data.allAtsigns; /// We want to remove the [activeAtSign] from this List because we  /// can't chat with ourselves!  allAtSigns.remove(activeAtSign); /// Again, call setState(() {}) to assign [allAtSigns] to the  /// variable [atSigns] that will be used in the dropdown widget.  setState(() { atSigns = allAtSigns; }); /// This is the only at_chat_flutter related function!  /// initializeChatService takes in an AtClientImpl instance, the  /// currently onboarded @sign, and the root domain for this project.  /// As its name suggest, this function will prepare the chat service  /// for us.  initializeChatService( clientSdkService.atClientServiceInstance.atClient, activeAtSign, rootDomain: MixedConstants.ROOT_DOMAIN); } Because getAtSignandInitializeChat() is an initialization function, it is best to call it in the initState() function at the top of the _SecondScreenState class. The only other thing we need to do before calling the “Chatting” widget is deciding who we’d like to chat with.\nsetAtsignToChatWith() { /// This function is as simple as calling the setChatWithAtSign()  /// function from the at_chat_flutter dependency with  /// [chatWithAtSign] passed in! [chatWithAtSign] is simply the @sign  /// that a user selects from the dropdown on the screen.  setChatWithAtSign(chatWithAtSign); } We won’t want to call setAtsignToChatWith() in initState() because the function won’t know which @sign we’re communicating with until the individual selects it from the dropdown widget. Instead, it makes the most sense to place this function in the button (FlatButton for the at_chats app) that determines the navigation to the next screen. For at_chats, clicking the “Chat options” FlatButton will check to make sure that the “chatWithAtSign” variable is populated before it calls setAtsignToChatWith() and switches the “showOptions” variable to true, which allows the individual to see the two options for viewing the chatbox.\nNow, for the moment of truth: once we’ve initialized the chat service, how do we create the actual chat screen? In most tutorials, you’ll probably be guided through a UI-heavy demo of different chatbox components and pairing a backend service. With the @platform, however, it’s really just one line of code:\n(This snippet is directly from third_screen.dart in the at_chats project!)\nclass _ThirdScreenState extends State\u003cThirdScreen\u003e { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('Chat')), /// You can simply set the body parameter of Scaffold widget  /// to the ChatScreen widget from the at_chat_flutter dependency!  body: ChatScreen( /// Optional parameters to customize your ChatScreen widget.  /// You can find the full list of parameters in our Github  /// under the at_widgets repository.  height: MediaQuery.of(context).size.height, incomingMessageColor: Colors.blue[100], outgoingMessageColor: Colors.green[100], isScreen: true, ), ); } } By initializing the chat service and calling the ChatScreen() widget, you can make a fully-functioning one-to-one messaging application! While the ChatScreen widget offers a number of ways to customize your chatbox, if you’d like to build your own widget from scratch, you can use the at_chat_flutter dependency as a basis for creating your personal chat library that works with the @platform.\n","categories":"","description":"Demonstrates the peer to peer chatting capabilities and just how easy it is to implement into any project!\n","excerpt":"Demonstrates the peer to peer chatting capabilities and just how easy …","ref":"/docs/sample-apps/at_chats/","tags":"","title":"at_chats"},{"body":"What to expect in the @certification process?  When your app is ready for user testing, email us a link to your code in GitHub at getcertified[at]atsign.com Look for our approval or revision suggestions within approximately 5 business days.  Here’s the criteria we use to evaluate apps: Safety and People Support  Does your app have any objectionable content? Does your app risk physical or psychological harm? Does your app provide customer care and contact info? Does your app use the automatic privacy compliance built into the @protocol?  Performance  Is the version of your app complete? Has it been beta tested? Have you assigned accurate metadata for search? Does your app meet the @sign guidelines for API?  Business  Does your app use surveillance-free advertising or subscriptions, if you decide to supplement your @sign commissions revenue? Does your app provide access to and an explanation of @sign registration for customers?  Design  Is your app designed well and does it integrate the @sign UI guidelines? Is your app valuable and enjoyable to use? Does your app take advantage of the @protocol benefits? Does your version have the MVP of features?  Privacy  Does your app only collect data on personal servers (true P2P, not on secondary servers)? Does your app ensure no tracking and location tracking? Is your app surveillance-free?  Approved apps will receive an @certified badge.\nPlace it in your app’s landing page to signal that you’re a trusted @ Platform developer with an equally trustworthy app.\nJoin our optional Affiliate Program by scheduling a short (20 minute) meeting to go over the program details.\n","categories":"","description":"Get your @app certified and enjoy the benefits the providing game changing Privacy-First experiences brings to the table.\n","excerpt":"Get your @app certified and enjoy the benefits the providing game …","ref":"/dev_tools/certification/","tags":"","title":"@certification"},{"body":"We’re excited to help you get your very own @platform environment up and running!\nPrerequisites You will need Flutter/Dart installed on your machine. If you haven’t already, please follow the “Getting started” steps on flutter.dev before you proceed. Flutter works best with Android Studio, but you can also use IntelliJor Visual Studio Code as your IDE.\nFlutter Why have we chosen to work with Flutter? That’s an easy question to answer! Typically the first thing a developer thinks about when talking about Flutter are the beautiful U.I.’s that can be created! You have the power to control every pixel that exists within your app whilst making your own brand come to life with flawless user experience.\nIf you’ve ever tried to compile an application on an emulator before, you already know how long and strenuous that process can be! However, with Flutter, apps directly compile to native ARM code which means insanely fast and efficient project builds that house buttery-smooth animations that allow GPU acceleration.\nIn addition to incredibly fast build times, you may have heard of Flutter’s ‘hot reload’ option! This option allows for you to make a quick edit to your code and instead of rebuilding your application time and time again, Flutter will update your source code files and automatically rebuild the widget tree, allowing you to see your edits almost immediatley!\nJust like the rest of the @protocol, Flutter is free and open-source! There are countless numbers of packages that exist on pub.dev that any developer is free to include in their applications. Flutter is a fast-growing community that would love to have you be a part of it!\nAndroid Studio Android Studio is an incredible Integrated Development Environment (IDE) that not only allows you to create projects with a seemingly endless number of programming languages, but also allows you to create what is called an Android Virtual Device (or AVD). If you’re looking for an easy IDE to get started on, this is the one we recommend! Most of our code, documentation and tutorials are created using Android Studio, so you’ll feel right at home!\nImportant Links for Android Studio\n Download Android Studio here Read an article on how to set up an AVD here   Intellij IntelliJ is another IDE you will commonly find among developers of all sorts. It has a similar feel to Android Studio and offers just about the same you can get from the other two IDE’s recommended here.\nImportant Links for IntelliJ\n Download IntelliJ here   Visual Studio Code Visual Studio Code, compared to IntelliJ and Android Studio can be seen as the IDE which has the most flexibility customization wise. You will commonly hear developers call this IDE; VS Code (because who has time to say entire words anyway?). If you have watched any of the tutorials that currently exist on atsign.dev, you may notice that VS Code is the other IDE of choice amongst our devs here!\nImportant Links for Visual Studio Code\n Download Visual Studio Code here   Docker Desktop If you wish to develop with testable, dummy @signs, you will also need to install Docker Desktop on your machine.\nBe sure that your machines operating system is completley up-to-date.\nWhere should I go next?  The Virtual Environment: Get started with setting up your machine using Docker!  ","categories":"","description":"The fastest way to get going developing with the @platform!\n","excerpt":"The fastest way to get going developing with the @platform!\n","ref":"/docs/get-started/","tags":"","title":"Get Started"},{"body":"at_hello_world: Demonstrates some of the most common verbs and methods that can be found on the @platform. If you are new to the @platform, this is the first demo application we recommend going through!\nLearn more\nat_chats: Demonstrates the peer to peer chatting capabilities and just how easy it is to implement into nay project!\nLearn more\nat_cookbook: Demonstrates some of the more complex verbs and methods that the @platform has to offer. Similar to at_chats in the sense of sending information to a separate @signs. At_cookbook builds upon this allowing you to send objects such as recipes to a separate @signs!\nLearn more\n@mosphere: Currently our most complex application that exists on the @platform! This app has the capability of sending entire files from one @sign to another! We highly recommend having a strong understanding of all of the common verbs and methods of the @platform before dissecting @mosphere!\nLearn more\n","categories":"","description":"Here, you'll find a nice list of the demo applications that show off the incredible usabilities of the @platform with varying levels of difficulty.\n","excerpt":"Here, you'll find a nice list of the demo applications that show off …","ref":"/docs/sample-apps/","tags":"","title":"Sample Apps"},{"body":"Script from Phillipe Tips from Xavier ","categories":"","description":"\nOur awesome developer community has come up with really cool tips,tricks \u0026 scripts to make your lives easier.\n","excerpt":"\nOur awesome developer community has come up with really cool …","ref":"/docs/resources/from-the-community/","tags":"","title":"Contributions from the community"},{"body":"at_persistence_spec at_persistence_spec is the Specification for the persistence layer implementation of @protocol development.\nLearn more\nat_commons at_commons library will be used for commonly used components in implementation of the @protocol.\nLearn more\nat_common_flutter A flutter package to provide common widgets used by other atsign flutter packages.\nLearn more\nat_client at_client is the Client SDK which provides the essential methods for building an app using the @protocol.\nLearn more\nat_lookup Library for executing at commands on a secondary server. Example - scan. update, lookup, llookup, plookup etc.\nLearn more\nat_persistence_secondary_server at_persistence_secondary_server is the Persistence layer implementation for @protocol secondary server.\nLearn more\nat_server_status The at_server_status library provides an easy means to check on the status of the @root server as well as the @server for a particular @sign.\nLearn more\nat_utils This is the Utility library for @protocol projects. It contains utility classes for atsign, atmetadata, configuration and logger.\nLearn more\nat_backupkey_flutter A flutter plugin project for saving backup key of any @sign that is being onboarded with @protocol apps. Backup key can used to authenticate in any @protocol apps.\nLearn more\nat_onboarding_flutter A flutter plugin project for onboarding any @sign in @protocol apps with ease. Provides QRscanner and upload key file option to authenticate.\nLearn more\nat_client_mobile Library for mobile app onboarding.\nLearn more\nat_contacts_flutter A flutter plugin project to provide ease of managing contacts for an atsign using atprotocol.\nLearn more\nat_chat_flutter A flutter plugin project to provide chat feature using atsigns and atprotocol.\nLearn more\nat_demo_data A library of data that contains demo enviroment variables and @sign credentials that can used for demo apps and testing\nLearn more\nat_contacts_group_flutter A flutter plugin project to provide the group functionality with contacts using atprotocol.\nLearn more\nat_location_flutter A flutter plugin project to share location between two atsigns and track them on OSM (open street maps).\nLearn more\nat_utf7 Provides methods to encode/decode strings to/from the utf7 format as defined in rfc 2152\nLearn more\nat_contact A starting point for Dart libraries or applications.\nLearn more\nat_events_flutter A flutter plugin project to manage events using the atprotocol.\nLearn more\nat_base2e15 binary-to-text encoding schemes that represent binary data in an unicode string format, each unicode character represent 15 bits of binary data.\nLearn more\nat_follows_flutter A new flutter plugin project to integrate follows functionality for any @sign. Provides list of followers, following and options to follow, unfollow any @sign.\nLearn more\nat_server_spec Specification for root and secondary server\nLearn more\nat_map A new Flutter plugin.\nLearn more\n","categories":"","description":"Find the list of libraries the @platform has to offer here!\n","excerpt":"Find the list of libraries the @platform has to offer here!\n","ref":"/docs/functional_architecture/libraries/","tags":"","title":"Libraries"},{"body":"The picture below provides a great way to visualize just how much thought has gone into making the life of a developer on the @platform that much easier! If you’re wondering what the difference between what the @platform consists of and what the @protocol consists of, look no further!\nThe @platform, which has been created on top of the @protocol consists of three major segments of developer tools. These segments consists of; Services, Libraries, and Widgets\n","categories":"","description":"The @ Company provides both a new Internet protocol and a platform to assist developers easily create ground-breaking applications that provide privacy focused, peer-to-peer services.\n","excerpt":"The @ Company provides both a new Internet protocol and a platform to …","ref":"/docs/functional_architecture/","tags":"","title":"Functional Architecture"},{"body":" tl;dr  Overview too long for you? Watch the  Tyler Time episode that covers this instead!  Overview of the at_cookbook app The at_cookbook app allows a testable @sign to create a recipe with a name, description, list of ingredients, and a picture. After doing this, the @sign is capable of sharing this entire recipe with another testable @sign. A dishWidget class is created which encapsulates an individual recipe with each instance. Its parameters are defined below:\nclass DishWidget extends StatelessWiatdget { final String title; final String ingredients; final String description; final String imageURL; final String prevScreen; DishWidget({ @required this.title, @required this.ingredients, @required this.description, @required this.imageURL, @required this.prevScreen, }); ... After we pull dishWidgets that exist in a secondary server, we display them on the home screen, where the list of recipes are located.\nNow that you have the recipe itself, you’re able to pass this through the notify verb. When an @sign wishes to share a recipe, the _share function will be called. This function is structured as so:\n_share(BuildContext context, String sharedWith) async { if (sharedWith != null) { AtKey lookup = AtKey() ..key = widget.dishWidget.title ..sharedWith = atSign; String value = await _serverDemoService.get(lookup); var metadata = Metadata()..ttr = -1; AtKey atKey = AtKey() ..key = widget.dishWidget.title ..metadata = metadata ..sharedBy = atSign ..sharedWith = _otherAtSign; var operation = OperationEnum.update; await _serverDemoService.notify(atKey, value, operation); Navigator.pop(context); } } Here, we’re initializing a variable called lookup as an AtKey object (lookup will be our recipe). You’ll notice that we’re defining a couple of the attributes of the AtKey object (mainly the name of the recipe and what @sign is this recipe being shared with).\nWe would like to “get” the values of our recipe, so we use the get verb from the serverDemoService file of the application. ttr (Time To Refresh), a metadata attribute, is called with a value of -1, which means that we’re confident that the values of our recipe won’t change. Once the recipe has been cached on the secondary server that has received the recipe, it will not need to worry about updating its values at any point.\nAfter passing all of the necessary values such as the metadata, the appropriate @signs, and the type of notification we’d like to send, we simply pass the values through the notify verb!\n","categories":"","description":"This is an intermediate-level @platform based application that uses the verbs we learned in the at_hello_world application to make a working cookbook for the chef inside of us all!\n","excerpt":"This is an intermediate-level @platform based application that uses …","ref":"/docs/sample-apps/at_cookbook/","tags":"","title":"at_cookbook"},{"body":"How Referrals Work True to our mission, we do not track people using our site, which is how most referral programs operate. Instead, we use the following methods to discover your referrals and give you credit:\nNew @ signs Paired With Your App After someone downloads your app, they must pair an @ sign with it so they can use it. New @ signs aren’t functional until they’ve been activated by the owner. The last step for @ sign activation is to pair the new @ sign with an app. Whenever someone pairs their new, paid @ sign with your app, you’ll receive referral credit. (We’ll talk more about this on our call when you’re ready to start earning commissions. If you’ve got questions in the meantime, feel free to ask!)\nReferral Link and Code We will provide you with a unique referral link that brings people to our site where they can get a free or paid @ sign. You can use this link on your blog or website, in your newsletter, on your social channels, and wherever you connect with your community. When someone clicks on your referral link, we’ll automagically add a unique code, connected to your account, to their shopping cart at checkout. If they purchase an @ sign, you’ll receive credit.\nWe will also provide you with the same unique code we add via the link, so you can share it verbally (excellent for when you’re a guest on a podcast, or are speaking at an event), on printed materials, or anytime a clickable link isn’t convenient. In order to receive referral credit in these cases, people must enter your code in the promo box when they purchase their @ sign.\nPlease carefully read the Additional Guidelines below for important information about properly implementing your link and code.\nDisclosure Per the Federal Trade Commission’s (FTC) guidelines you must disclose that you will earn a commission on sales made when someone clicks on your link or enters your code at checkout.\nYour disclosure needs to be near the referral link, so you can be reasonably sure that anyone clicking through to purchase an @sign understands that you have a partnership with The @ Company.\nHere’s wording that you’re welcome to use. You can update the “I” in “…I will earn a commission…” with “we” or your company name — whatever’s the best fit.\n“Disclosure: If you purchase an @sign after clicking on this link, I will earn a commission. You will never be charged any fee or incur any additional costs for being referred.”\nTo ensure both clarity for the consumer and compliance with this U.S. law, we will also provide disclosure on our site for anyone purchasing an @ sign.\nEarnings When people pair their new @ sign with your app, or use your referral link or code to purchase an @sign (or several!), you’ll earn a 20% commission.\nA few notes about this:\n There is no commission on free @signs. Regarding referral links: Commissions are assigned to the owner of the last referral link that the person making the purchase clicked. Example: If Customer A clicks on a link provided by Developer X, and then later clicks on a link provided by Developer Y and purchases an @sign, Developer Y will receive the full commission for transactions related to Customer A. Commissions will not be split or transferred. Commission will not be applied retroactively.  Commissions earned in the space of each month will be finalized and approved by The @ Company on or about the 5th of the following month, and paid on or about the 15th of the month when they were approved (excluding holidays and weekends, which will be approved or paid on or about the next business day). For example, if you earn a commission on August 5th, it, along with all August commissions, would likely be approved by September 5th and paid on September 15th.\nThere is a minimum payment threshold of $25 for U.S.-based participants, and $100 for those outside of the U.S. If you earn less than the minimum in a month, your earnings roll over to the following month, and will continue to do so until you reach the threshold.\nYou are responsible for all taxes and reporting requirements stemming from your commission earnings. We will provide you with a statement of activity, and a U.S. Tax Form 1099 if you’re paying taxes in the U.S. and we pay you $600 or more in a calendar year.\nDashboard You’ll have access to our Partner Dashboard that will display your revenue and upcoming payment information, along with reporting that shows the transaction details for all your commissions.\nAdditional Guidelines In addition to the disclosure requirement mentioned above, there are some other advertising guidelines you must follow.\nReferral Link and Code Best Practices:  Please do not make any alterations to your referral link, including using URL shorteners. If it’s not exactly what we sent you, we won’t be able to credit you for your referrals. Please make sure to display your disclosure statement along with your referral link, or use a verbal disclosure if you’re sharing the code in conversation.  General Advertising Guidelines:  We may offer you access to discounts, coupons, promo codes, or other promotional offers. In order to take advantage of those, you’ll need to comply with all terms and limitations that we establish in connection with any promotional offers. We’re solidly anti-spam. Please do not engage in any telemarketing or send any unsolicited bulk-emails, SMS, or text messages containing your referral link, code, or any marketing messages about the program. Please do not alter any of The @ Company’s marketing images, text, or other materials we provide to you without our written consent and approval. Look for a resource library with images and copy coming soon!  Social Media \u0026 Newsletter Advertising Guidelines:  If you’d like to share your referral link with your community via a newsletter or your social channels, that’s great! Please contact us for images and text suggestions to make it super easy to do so. We’re happy to work with you as schedules allow if you’d like to interview someone on the team or have help writing longer-form content for your newsletter, blog, or website. Please do not reproduce content from our site or social channels without our permission. If you’re posting on any social platforms, you’ll need to disclose our partnership. (Always, always disclose.) Acceptable hashtag disclosures are #sponsored #ad #affiliate #paid Referral links may be posted on your social channels, and not on anyone else’s. Please do not post your referral link on any of The @ Company’s social channels or other properties. You may not create a social media account that includes our trademark(s) in the page name and/or username.  ","categories":"","description":"Earn a 20% commission when people you refer purchase a new @sign. \n","excerpt":"Earn a 20% commission when people you refer purchase a new @sign. \n","ref":"/dev_tools/affiliates/","tags":"","title":"Earn while growing the @ecosystem"},{"body":"Application Access to Data There are three basic types of application data access:\n Storing and retrieving data for your application Accessing data shared by others Accessing and reasoning over data stored by other applications  Storing and retrieving data for your application If your application needs to store data, you can use the @SDK to manage data securely and easily in the @persistence keystore. This SDK provides the following capabilities:\n Data is stored in an encrypted keystore locally for your application Data access is in-memory and super fast Offline access with the device is supported Data is synchronized and backed up to a cloud @server automatically Data is synchronized across all the person’s devices automatically Privacy is hardcoded: The owner of the data controls all access to it  Note: the cloud @server does not have access to the secret private key. This prevents bad actors from accessing or modifying private data not meant for them.\nCreating, updating and deleting data with your application Data operations that involve writing data to the @persistence keystore can only be done with the approval of the owner. Access to this data is cryptographically controlled. This is managed for your application by the @SDK and is remarkably easy. The types of access that can be set for each data record include: public: data that can be read by anyone without need for authentication shared: data that the owner has explicitly granted the right to some entity to read it after proving they are who they claim to be private: data that is only accessible to the owner (requires authentication)\nhidden: publicly readable data that is not listed in a scan of the keystore.\nNaturally, the owner of an @persistence keystore has access to any and all data that is contained therein. After being authorised, your application can read the data that it needs from the keystore as well. Applications that prefer to rely on data within its own namespace can also store read data from the @persistence keystore with approval of the owner. As always, all data stored is owned and controlled by the owner of the @persistence keystore.\nFor more information on how your application can create, update, or delete data, see the @Persistence Keystore Guide and the @Protocol Verbs.\nAccessing data shared by others Applications typically are a combination of an owner’s data and data that has been shared with them by others. This is a new feature, and is what we’re referring to when we talk about P2P (Peer-to-Peer) applications.\nFor example, messaging applications available today involve a combination of data (messages) from various people, but have no way to ensure that each individual message belongs to its creator. With the @protocol, messages that I create and share with other people are owned by me and likewise, messages that others create and share with me are owned by them. The messaging application is thus responsible for interleaving and presenting these messages while simultaneously maintaining privacy controls for the owner of the data (i.e. I own my messages to you and you own your messages to me).\nWhile this may seem confusing and difficult at first, the @Client SDK and the Flutter UI Component libraries make it very simple to implement. This results in surveillance-free, privacy-compliant applications that are simple, cost-effective, and efficient, with better performance than backend server-based applications of the past.\nThe @Client SDK provides the following capabilities that help to integrate data shared by others in your application:\n Public data shared by others can be looked up The notification verb alerts your application when new data shared by others is available The monitor verb creates a persistent connection for real-time interactions Data can be scanned for and read directly from another person’s @persistence keystore Shared data is cached for fast, reliable access to shared data with all privacy related parameters managed for you by the @Client SDK  For more information on how your application can create, update, or delete data, see the [@Persistence Keystore Guide](Persistence Keystore Guide) and the @Protocol Verbs.\nAccessing and reasoning over data stored by other applications One super interesting side effect of giving people control of their data and storing it all in one place is that any application that they authorize can reason over any data that they are allowed to access. Applications that are certified as @protocol compliant (@pps) can provide amazing new experiences because they have the ability to access and reason over all data stored in an @persistence keystore.\nFor example, a certified messaging app may contain a thread where a group of people are discussing which movie to go see on Wednesday night. If permitted, this information can also be presented as an event in their certified calendar application and similarly presented as a group in their certified contacts application.\nAdvanced Options Create a separate @persistence keystore for your application (certification not required) If you would like to store application data, you are free to use the @persistence keystore for your persistence if you want to. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.\nAuthentication only, without the @persistence keystore (certification not required) If your application does not require data persistence on behalf of the person using it; for example if you just want to make sure that your application is licensed to the person using it, then you do not need to get it certified. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.\nFor more information about getting your application certified, see the Certification page.\n","categories":"","description":"\nIn familiar data models, sharing data online is often disadvantageous for its owner. But by upholding data privacy principles, the @platform ensures that people will always have control over their data, even if they decide to share it with others. Naturally, this also applies to data shared by others. With the @platform, features like data access, ownership, and permissioning look very different from what most developers are used to. This page explains how ownership and permissions affect access to data. \n","excerpt":"\nIn familiar data models, sharing data online is often disadvantageous …","ref":"/docs/resources/data-privacy-and-permissions/","tags":"","title":"Data Privacy \u0026 Permissions Guide"},{"body":"Frequently Asked Questions Dropdown Format  General  Get Started Contributing    Android Heading  A numbered list  With some Sub bullets      Flutter Heading  A numbered list  With some Sub bullets      Virtual Environment Heading  A numbered list  With some Sub bullets     ","categories":"","description":"Have questions/issues related to Android? It's more than likely you'll find the answer here!\n","excerpt":"Have questions/issues related to Android? It's more than likely you'll …","ref":"/docs/faqs/android/","tags":"","title":"Android"},{"body":"Frequently Asked Questions Dropdown Format  General  Get Started Contributing    Android Heading  A numbered list  With some Sub bullets      Flutter Heading  A numbered list  With some Sub bullets      Virtual Environment Heading  A numbered list  With some Sub bullets     ","categories":"","description":"Have questions/issues related to Flutter? It's more than likely you'll find the answer here!\n","excerpt":"Have questions/issues related to Flutter? It's more than likely you'll …","ref":"/docs/faqs/flutter/","tags":"","title":"Flutter"},{"body":"Frequently Asked Questions Dropdown Format  Get Started  Get Started Contributing    Contribution Heading  A numbered list  With some Sub bullets      Commisions Heading  A numbered list  With some Sub bullets      What is the @platform? Heading  A numbered list  With some Sub bullets     ","categories":"","description":"Have questions? It's more than likely you'll find the answer here!\n","excerpt":"Have questions? It's more than likely you'll find the answer here!\n","ref":"/docs/faqs/general/","tags":"","title":"General"},{"body":"Frequently Asked Questions Dropdown Format  General  Get Started Contributing    Android Heading  A numbered list  With some Sub bullets      Flutter Heading  A numbered list  With some Sub bullets      Virtual Environment Heading  A numbered list  With some Sub bullets     ","categories":"","description":"Have questions related to the virtual environment and DESS? It's more than likely you'll find the answer here!\n","excerpt":"Have questions related to the virtual environment and DESS? It's more …","ref":"/docs/faqs/virtualenv/","tags":"","title":"Virtual Environment"},{"body":"In real-time, you can send files across any device regardless of your location — with the added benefit of total privacy. You can fearlessly share contracts, tax information, or other confidential information without worrying about your data being stored on a server in the cloud.\nTo see a demonstration of @mosphere, refer to the GIF below:\nCreating your own @platform data-streaming application Just like any Flutter app, an @platform application requires a little bit of setup before you can get started. Here are those steps:\n Add the service file to your app: You can simply copy this service file from our demo at_hello_world application. These files contain helper methods that allow you to implement @protocol functionality with just a couple lines of code. Add the configuration file to your app: Again, feel free to copy this from the at_hello_world and @mosphere application. This file contains variables that allow you to use the virtual environment. Make sure that the ROOT_DOMAIN string is set to vip.ve.atsign.zone and you have a unique name for the NAMESPACE of your @pp! Copy the dependencies from the at_hello_world and @mosphere pubspec.yaml files and put them into your project.  We are super glad that you are beginning your journey as an @dev. We highly recommend that you join our discord dev community for troubleshooting, dev updates, and much more!\n","categories":"","description":"Makes peer-to-peer encrypted file sharing possible.\n","excerpt":"Makes peer-to-peer encrypted file sharing possible.\n","ref":"/docs/sample-apps/mosphere/","tags":"","title":"@mosphere"},{"body":"Frequently Asked Questions Table Format    General Android Flutter Virtual Environment     Get Started Set-Up Flutter Doctor Buffer   Contributing Emulator Buffer Buffer   Developer Commissions Android SDK Flutter SDK Buffer   @Client SDK Cookbook Gradle Buffer Buffer    Frequently Asked Questions Dropdown Format  General  Get Started Contributing    Android Heading  A numbered list  With some Sub bullets      Flutter Heading  A numbered list  With some Sub bullets      Virtual Environment Heading  A numbered list  With some Sub bullets     ","categories":"","description":"Have questions? It's more than likely you'll find the answer here!\n","excerpt":"Have questions? It's more than likely you'll find the answer here!\n","ref":"/docs/faqs/","tags":"","title":"Frequently asked questions"},{"body":"Caching Data that others have shared with an @sign owner is cached on the @sign owner’s device’s local keystore if permitted.\nEncryption Notification Onboarding Peer-to-Peer Streams Persistence Synchronization ","categories":"","description":"Here you will find a list of some of the most important services of the @platform. If you'd like to read up more on how the @protocol works under the hood, this is the page to be on!\n","excerpt":"Here you will find a list of some of the most important services of …","ref":"/docs/functional_architecture/dess/","tags":"","title":"Dess(Distributed Edge Secondary Server)"},{"body":"Application data storage Data for your application is the combination of the device owner’s data with data that has been shared by others. An @sign owner’s data is…\n Stored in the the @sign owner’s device’s (local) @persistence keystore Accessed by others via their internet addressable, always-on, secure, cloud (remote) @server Backed up in their secure cloud (remote) @server Synchronized between their cloud (remote) @server and any other devices that belong to the owner Secured by secret keys which are only stored on the @sign owner’s device’s keychain  Note: The @sign owner’s cloud (remote) @server does not hold the owner’s secret key, which is required to make changes to the data. The local @server on the owner’s device must initialize any data changes.\nData that others have shared with an @sign owner is…\n Accessed directly from their secure cloud (remote) @server with full privacy controls so it is always up to date Cached on the @sign owner’s device’s local keystore if permitted Removed from the @sign owner’s device’s local keystore automatically according to the permissions set by the owner of the data Updated upon change automatically using the notification verb  How application data is stored and retrieved As mentioned above, data is stored encrypted as a key/value pair. The @Client SDK supports a familiar set of methods to store and retrieve data from an @persistence keystore. You should always keep in mind that the @protocol includes strict privacy controls applied to all data in an @persistence keystore.\nApplication Access Apps can reason over all of my data in my @persistence keystore One super interesting side effect of giving people control of their data and storing it all in one place is that any application that they can choose to reason over any data that they are allowed to access in order to create altogether new user experiences.\nFor example, their certified messaging application may contain a thread where a group of people are discussing which movie to go see on Wednesday night. If permitted, this information can also be presented as an event in their certified calendar application as well as a group in their certified contacts application.\nAccess within an application namespace Applications that only rely on data within its own namespace can also store data in the @persistence keystore if certified as @protocol compliant. If the data being stored rightfully belongs to the person creating it (which is the case most of the time), then they will have control of how it is used and shared with other entities and applications.\nUse a separate @persistence keystore for your application (certification not required) If you would like to store application data, you are free to use the @persistence keystore for your persistence if you want to. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.\nAuthentication only, no need to use the @persistence keystore (certification not required) If your application does not require data persistence on behalf of the person using it; for example if you just want to make sure that your application is licensed to the person using it, then you do not need to get it certified. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.\nFor more information about getting your application certified, see the Certification page.\n","categories":"","description":"\nWith the @protocol, a person’s data may be stored in the @persistence keystore, an encrypted key/value store which is managed by the at_client_sdk. Get to know how it works.\n","excerpt":"\nWith the @protocol, a person’s data may be stored in the @persistence …","ref":"/docs/resources/persistence-keystore-guide/","tags":"","title":"Persistence Keystore Guide"},{"body":"The Onboarding Widget Onboarding for the first time with the @platform isn’t as simple as choosing your @sign from a dropdown menu and clicking “Login” (after all, how would the application know where to retrieve your authentication keys from a given @sign?).\nImplementing onboarding from scratch would be painstakingly difficult. Not only would you have to code the PKAM logic, but you would also have to build your own QR code scanner to extract the CRAM (Challenge-Response Authentication Mechanism) key from your @sign’s QR code generated on our website! The @ Company realized this very quickly, so we developed the at_onboarding_flutter widget to help developers who want to build production-level apps that onboard real @signs (AKA @signs that you get from our .com site).\n Learn more about the onboarding widget here! Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_onboarding_flutter: ^1.0.0+4 The “Onboarding” widget is very handy in that you do not need to call the “onboard” or “authenticate” methods from the service file of the application to get it running. Instead, it will ask us to specify the following parameters (descriptions for each parameter are written in the comments):\nclass Onboarding { ///Required field as for navigation.  final BuildContext context; ///Onboards the given [atsign] if not null.  ///If [atsign] is null then it takes the atsign from keychain.  ///If [atsign] is empty then it directly jumps into authenticate  ///without performing onboarding. (or)  ///If [atsign] is empty then it just presents pairAtSign screen  ///without onboarding the atsign. (or)  ///Just provide an empty string for ignoring existing atsign in  ///keychain or app's atsign.  final String atsign; ///The atClientPreference [required] to continue with the onboarding.  ///atClientPreference is an instance of a class in the  ///at_client_mobile library that stores a number of important  ///attributes like the namespace of the application, the CRAM key of  ///an @sign, the root domain we want the project to communicate  ///with, and so on.  final AtClientPreference atClientPreference; ///The root domain for our project. By default, the plugin connects  ///to [root.atsign.org] to perform onboarding.  final String domain; ///The color of the screen to match with the app's aesthetics.  ///default it is [black].  final Color appColor; ///If logo is not null, then it displays the widget on the left side  ///of appbar. Else, it displays nothing.  final Widget logo; ///Function returns atClientServiceMap on successful onboarding along  ///with onboarded @sign. Assign these returned values to the relevant  ///variables in your project’s service file.  final Function(Map\u003cString, AtClientService\u003e, String) onboard; ///Function returns error if onboarding fails for an @sign.  final Function(Object) onError; ///After successful onboarding, the app will be redirected to this  ///screen if it is not null.  final Widget nextScreen; ///After the first successful onboarding, the app will get redirected  ///to this screen if not null.  final Widget fistTimeAuthNextScreen; final AtSignLogger _logger = AtSignLogger('At Onboarding Flutter'); Onboarding({Key key, @required this.context, this.atsign, @required this.onboard, @required this.onError, this.nextScreen, this.fistTimeAuthNextScreen, @required this.atClientPreference, this.appColor, this.logo, this.domain}) ... } To see an actual implementation of the onboarding widget, let’s revisit the _login function in the at_hello_world app with some updated code:\n/// Return an “Onboarding” widget that walks the individual through /// the onboarding procedure for any real @sign. _login() async { return Onboarding( context: context, /// Ensure that the “root” attribute is assigned to  /// “root.atsign.org”  domain: AtConfig.root atClientPreference: await _serverDemoService.getAtClientPreference(), appColor: Color.fromARGB(255, 240, 94, 62), onboard: (atClientServiceMap, atsign) { _serverDemoService.atClientServiceMap = atClientServiceMap; _serverDemoService.atSign = atsign; }, onError: (error) { print(error); }, /// Remove the constructor in HomeScreen. You can call the @sign  /// with the getAtSign() method in the service file.  nextScreen: HomeScreen(), ); } All of the parameters in the “Onboarding” widget can be populated very easily with either methods from the project’s service file (e.g. getAtClientPreference()) or special variables from the app itself (e.g. context). “Onboarding” is capable of handling all instances of an @sign (e.g. a particular @sign does not exist, a particular @sign exists but needs to be paired with a QR code to the device, a particular @sign exists and its keys are already in the device’s keychain manager). By using this widget, what would have taken several screens and many lines of code can be completely bypassed with a single return statement!\nThat’s all for the “Onboarding” widget. Before moving on from this subsection, we highly recommend implementing the widget in your own application and onboarding a real @sign to understand its intended user journey. If you’re interested, these are the steps to implement the “Onboarding” widget in the at_hello_world project:\nUpdate your Android Studio, Flutter SDK, and Dart SDK to their latest versions. Place the at_onboarding_flutter dependency in pubspec.yaml. Follow the setup procedure for the “Onboarding” widget in the “AndroidManifest” (android -\u003e app -\u003e src -\u003e main -\u003e AndroidManifest.xml) and “gradle” file (android -\u003e app -\u003e build.gradle) of the at_hello_world project. You may also need to update the “classpath” of the android gradle build tool to 3.5.4 (this can be done by going to android -\u003e gradle -\u003e build.gradle and editing the first classpath in the “dependencies” brackets). This must be completed in order to set up the permission for the QR code scanner to access your camera. Find those steps on the pub.dev site for at_onboarding_flutter here. Get a free @sign from atsign.com. Generate its QR code, and drag/drop the created file directly into the emulator. Confirm that the QR code image appears in the “Files” or “Drive” app of the emulator you’re using (assuming that it is an Android emulator). In “at_conf.dart”, update the “root” variable from ‘vip.ve.atsign.zone’ to ‘root.atsign.org’. This ensures that the project points to the domain that is used in production as opposed to the one for the virtual environment. Replace the existing code in the login() function with what we wrote above. Double-check that no errors arise (you’ll likely have to tweak the names of a couple of methods in the service file, because some of them begin with the “” private designation). Fire the app on your emulator. Although the dropdown menu will still appear (since we didn’t change any of that code), we will not be authenticating with any of the testable @signs. If you’d like, simply remove the “DropdownButton” widget so that we can eliminate the list of testable @signs. Click on the “Login” button. Assuming that you haven’t previously authenticated with a real @sign, the “Onboarding” widget should prompt you with a request to upload your QR code. Upload the QR code you saved onto the emulator earlier and wait for the authentication to complete. If no errors form, the “Onboarding” widget should take you seamlessly to the “Home” screen, where you can add \u0026 retrieve key/value pairs directly from your very own secondary server! The next time you authenticate (i.e. restart the application), the “Onboarding” widget should detect the authentication keys placed in your device’s keychain manager and guide you directly to the “Home” screen.\n The Chatting Widget One of the many things you can do after successfully authenticating an @sign is providing one-to-one text messaging! To do this, you’ll need the at_chat_flutter dependency.\nThe at_chat_flutter widget offers a messaging experience that is unique to the @platform. In a traditional messaging application, your texts are stored in a remote database and the person you’re pinging pulls the texts from there (a bit unsettling if you think about it). Of course, there is no such thing as a remote database in the @platform, so we had to be a bit clever coming up with a messaging scheme. In a nutshell, your text messages are not “sent” but rather “shared” with another @sign. All your texts are stored securely in your secondary server and never leave; if you decide to send a message to someone, that person is given permission to view that text via the notify verb, which will be covered in the next section on advanced @platform verbs.\n Learn more about the chatting widget here!  Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_chat_flutter: ^1.0.1 Although this messaging dynamic might sound a bit involved, set up is quite easy! To get a feel for using the “Chatting” widget, it’s best to follow along with the at_chats demo application.\nThe general flow of all @platform widgets is onboarding an @sign =\u003e initializing the service object =\u003e creating the actual widgets. Assuming we’ve already onboarded an @sign, let’s look at the steps to initialize our chat service:\n(The following code snippets are taken directly from at_chats. While there will be explanations, don’t worry too much about all the variables!)\ngetAtSignAndInitializeChat() async { /// In the at_chats app, the onboarded @sign is displayed at the top  /// of the Second Screen. We set that @sign to [currentAtSign].  String currentAtSign = await clientSdkService.getAtSign(); /// Set [activeAtSign], which is the variable that gets displayed, to  /// [currentAtSign] using setState(() {}).  setState(() { activeAtSign = currentAtSign; }); /// Initialize a List of Strings called [allAtSigns] that we will  /// eventually display in the dropdown on the Second Screen. Here, we  /// simply pull an existing List from the at_demo_data dependency.  List\u003cString\u003e allAtSigns = at_demo_data.allAtsigns; /// We want to remove the [activeAtSign] from this List because we  /// can't chat with ourselves!  allAtSigns.remove(activeAtSign); /// Again, call setState(() {}) to assign [allAtSigns] to the  /// variable [atSigns] that will be used in the dropdown widget.  setState(() { atSigns = allAtSigns; }); /// This is the only at_chat_flutter related function!  /// initializeChatService takes in an AtClientImpl instance, the  /// currently onboarded @sign, and the root domain for this project.  /// As its name suggest, this function will prepare the chat service  /// for us.  initializeChatService( clientSdkService.atClientServiceInstance.atClient, activeAtSign, rootDomain: MixedConstants.ROOT_DOMAIN); } Because getAtSignandInitializeChat() is an initialization function, it is best to call it in the initState() function at the top of the _SecondScreenState class. The only other thing we need to do before calling the “Chatting” widget is deciding who we’d like to chat with. setAtsignToChatWith() { /// This function is as simple as calling the setChatWithAtSign()  /// function from the at_chat_flutter dependency with  /// [chatWithAtSign] passed in! [chatWithAtSign] is simply the @sign  /// that a user selects from the dropdown on the screen.  setChatWithAtSign(chatWithAtSign); } We won’t want to call setAtsignToChatWith() in initState() because the function won’t know which @sign we’re communicating with until the individual selects it from the dropdown widget. Instead, it makes the most sense to place this function in the button (FlatButton for the at_chats app) that determines the navigation to the next screen. For at_chats, clicking the “Chat options” FlatButton will check to make sure that the “chatWithAtSign” variable is populated before it calls setAtsignToChatWith() and switches the “showOptions” variable to true, which allows the individual to see the two options for viewing the chatbox.\nNow, for the moment of truth: once we’ve initialized the chat service, how do we create the actual chat screen? In most tutorials, you’ll probably be guided through a UI-heavy demo of different chatbox components and pairing a backend service. With the @platform, however, it’s really just one line of code:\n(This snippet is directly from third_screen.dart in the at_chats project!)\nclass _ThirdScreenState extends State\u003cThirdScreen\u003e { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('Chat')), /// You can simply set the body parameter of Scaffold widget  /// to the ChatScreen widget from the at_chat_flutter dependency!  body: ChatScreen( /// Optional parameters to customize your ChatScreen widget.  /// You can find the full list of parameters in our Github  /// under the at_widgets repository.  height: MediaQuery.of(context).size.height, incomingMessageColor: Colors.blue[100], outgoingMessageColor: Colors.green[100], isScreen: true, ), ); } } By initializing the chat service and calling the ChatScreen() widget, you can make a fully-functioning one-to-one messaging application! While the ChatScreen widget offers a number of ways to customize your chatbox, if you’d like to build your own widget from scratch, you can use the at_chat_flutter dependency as a basis for creating your personal chat library that works with the @platform.\n The Contacts Widget Too many @signs to keep track of? That’s no problem with the at_contacts_flutter widget! Simply add the at_contacts_flutter dependency to your project, and you’ll be capable of performing several actions with your @sign contacts.\n Learn more about the contacts widget here!  Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_contacts_flutter: ^1.0.0 In order to implement the at_contacts_flutter widget, you must first, of course, create an AtClientService instance and authenticate an @sign.\nAfter you have successfully onboarded an @sign, you can add a page where you may choose to show your contacts or show your blocked contacts. On load of this page, you will want to initialize the contacts service, similar to initializing the at_chats service. The contacts service needs to be initialised with the atClient from the AtClientService, current @sign, and the root domain.\ninitializeContactsService( clientSdkService.atClientServiceInstance.atClient, activeAtSign, rootDomain: MixedConstants.ROOT_DOMAIN); After successfully initializing the contact service, you will now be capable of getting the list of contacts that exist for the authenticated @sign. This is as easy as simply passing the contacts into a variable.\nvar _result = await _contactService.fetchContacts(); This fetchContacts() function exists in the _contactService file, which can be found within the at_contact’s ‘services’ folder. If you want to do more than just get the list of contacts, you have the capability of adding more contacts to this list, in addition to removing or blocking any. In order to retrieve the list of blocked contacts, it is similar to retrieving the regular list of contacts. The code from the example app demonstrates this well.\nClass BlockedScreen extends StatefulWidget{ @override _BlockedScreenState createState() =\u003e _BlockedScreenState(); } class _BlockedScreenState extends State\u003cBlockedScreen\u003e { // Here, we are initializing a ContactService object in order  // to call our list of blocked contacts later within our widget.  // Refer to how the list is populated within the example app  ContactService _contactService; @override void initState() { _contactService = ContactService(); _contactService.fetchBlockContactList(); super.initState(); } To block a contact, it is as easy as calling the blockUnblock method. If a contact is blocked, it will unblock the contact. If the contact is not blocked, it will block it for you.\nawait _contactService.blockUnblockContact(contact: _atSign_you_wish_toBlockUnblock); After you block a contact, you may wish to have that contact removed from the list. All you have to do is simply implement the code below:\nawait _contactService.deleteAtSign(atSign: _atSign_you_wish_toRemove); Along with the previously stated functionalities, the at_contacts_flutter package also provides the UI so there’s no need to set up a separate page to house these functions!\n The Location Widget One of the more common mobile application features is geolocation. Even if your app doesn’t explicitly use a map, with an individual’s permission, you can use their location for a variety of relevant recommendations like shops, restaurants, and nearby events. The at_location_flutter dependency is a powerful abstraction for geolocation with the @platform, and we’ll see some use cases of its most common functions.\n Learn more about the contacts widget here!  Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_location_flutter: ^1.0.3 Once we’ve successfully onboarded an @sign, let’s initialize our location service. For this subsection, we’ll base our code off of the example app in the Github directory for at_location_flutter.\ninitService() { /// A different way to call the currently onboarded @sign. In  /// practice, it is better to write a getAtSign() method in your  /// project's service file. This variable is used to display the  /// onboarded @sign at the top of the screen.  activeAtSign = clientSdkService.atClientServiceInstance.atClient.currentAtSign; /// initializeLocationService() is a function from  /// at_location_flutter that's located in init_location_service.dart.  /// This function takes in an AtClientImpl instance, the currently  /// onboarded @sign, a GlobalKey to access the NavigatorState (for  /// navigating between routes), and the domain we want to point our  /// project to.  initializeLocationService( clientSdkService.atClientServiceInstance.atClient, activeAtSign, NavService.navKey, rootDomain: MixedConstants.ROOT_DOMAIN ); } As is the case with most @platform widgets, you can call this initialization function in the initState() function of your class.\nOnce our location service is ready to go, you can let the authenticated individual freely send and request locations to/from other @sign customers. These capabilities are made possible with the “sendShareLocationNotification” and “send RequestLocationNotification” functions (which exist in the init_location_service.dart file).\nElevatedButton( onPressed: () async { /// checkAtsign() is a helper functions that ensures the entered  /// @sign (for sending/requesting a location) is valid. It is  /// unique to the example app in the at_location_flutter Github  /// directory.  bool result = await checkAtsign(); if (!result) { CustomToast().show('@sign not valid', context); return; } /// This function takes in the @sign receiving the location  /// notification as well as the duration (in minutes) of  /// how long this shared location persists on the receiving  /// @sign's secondary server.  await sendShareLocationNotification(receiver, 30); }, child: Text('Send Location'), ), ElevatedButton( onPressed: () async { bool result = await checkAtsign(); if (!result) { CustomToast().show('@sign not valid', context); return; } /// Similar to the previous function,  /// \"sendRequestLocationNotification\" needs the @sign to  /// request a location from.  await sendRequestLocationNotification(receiver); }, child: Text('Request Location'), ), While the above two functions are certainly useful, there is another widget in the at_location_flutter dependency that offers a more elegant UI for sending your location, requesting locations, and even visualizing your current position. That widget is called “HomeScreen”.\n/// When an individual clicks on the ElevatedButton that says “Show /// map”, the Navigator will lead them to the HomeScreen(). ElevatedButton( onPressed: () { Navigator.of(context).push(MaterialPageRoute( builder: (BuildContext context) =\u003e HomeScreen(), )); }, child: Text('Show map'), ), The HomeScreen displays a map with your location and offers two options (contained in “Task” widgets) that provide more user-friendly versions of the “sendShareLocationNotification” and “send RequestLocationNotification” functions (if you’re curious, these more elegant widgets are called ShareLocationSheet() and RequestLocationSheet() respectively). When you click on one of these tasks, a popup will appear to enter a receiving @sign (and duration for sharing a location), and any task you complete will appear in the bottom white region of the screen with its current status.\nThat’s all for the “Location” widget! If you want to test the at_location_flutter dependency for yourself, feel free to start by cloning the example app from the at_location_flutter Github repository. For more intricate functions like the location notification stream, our Github would be an excellent place to learn more.\n The Events Widget Like how we regularly share calendar items between our friends, family, and colleagues, it would be very convenient to have a data structure for events that works with the @platform. This is where the at_events_flutter dependency comes into play.\n Learn more about the events widget here!  Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_events_flutter: ^1.0.0 The first step, as you very well may have guessed, is the initialization of the event service. Like the previous few widgets discussed above, we’ll be examining snippets from the example app in the at_event_flutter Github directory throughout this subsection.\ninitService() { activeAtSign = clientSdkService.atClientServiceInstance.atClient.currentAtSign; /// Unlike most of the initialization functions, our event  /// initializer only needs an AtClientImpl instance and an optional  /// argument for the root domain. initialiseEventService(clientSdkService.atClientServiceInstance.atClient, rootDomain: MixedConstants.ROOT_DOMAIN); } The most important function in the at_event_flutter library is CreateEvent(), which builds an instance of a CreateEvent that can be customized and shared across different @signs:\nTextButton( onPressed: () { /// bottomSheet will return a pop up screen that takes up 90%  /// of the screen height.  bottomSheet( CreateEvent(), MediaQuery.of(context).size.height * 0.9); }, child: Container( height: 40, child: Text('Create event', style: TextStyle(color: Colors.black)), ), CreateEvent() is a separate screen in the application that guides an individual through a list of fields they can populate to provide information about their event. If you look into the CreateEvent class, you’ll see that these fields are stored in an object called “eventData”, which is an instance of an EventNotificationModel. It’s full list of attributes is below (the ones with comments are used in the CreateEvent class):\nclass EventNotificationModel { EventNotificationModel(); String atsignCreator; bool isCancelled; /// The title of the event.  String title; /// A location serving as the event's venue.  Venue venue; /// An object that stores info like event date, start time, and repeat duration.  Event event; String key; AtGroup group; bool isSharing; bool isUpdate; //when an event data is being updated , this should be true.  ... } “eventData” is a crucial data structure that’s used not just in creating an event but updating and deleting events as well. The init_events_service.dart file illustrates a variety of functions that can be used to perform useful actions on these objects.\nOne important feature of the example app is its EventList class, which doesn’t come directly with the at_events_flutter dependency:\nTextButton( onPressed: () { Navigator.push( context, MaterialPageRoute( builder: (context) =\u003e EventList(), ), ); }, This seemingly harmless class is actually doing quite a bit of work behind the scenes! EventList listens to an event stream that comes from an EventService object (a class within the at_event_flutter dependency) and displays them in a ListView format. Clicking on one of these events, you’ll be navigated to a popup of a CreateEvent instance with its “isUpdate” parameter set to true. This allows you to edit and save any event of your choice!\n The Backup Keys Widget When someone uses their @sign for the first time with an @platform app, it is important to have them authenticate with their generated QR code and create a set of backup keys just in case the ones in the keychain manager are lost or if you want to use the same @sign on a different device. The backup keys widget occurs during the “Onboarding” widget.\n Learn more about the events widget here!  Note This dependency value may not be up-to-date so be sure to check it out on our pub.dev!  Use this package as a library at_onboarding_flutter: ^1.0.0+4 You may notice that in order to get the at_backupKeys_flutter package, you can simply pull from the at_onboarding_flutter widget which houses the at_backupkeys_flutter widget! See below the process of at_onboarding_flutter to see where at_backupkeys_flutter comes into play!\n    After inputting what @sign you wish to pair, you will need to upload the QR code retrieved from atsign.com. The emulator in the picture is not hooked up to a camera, so a small GIF of a house is there to fill where the camera would be. After successfully uploading and authenticating with the QR code, the backup key widget will be introduced to you! From the save option, you will be prompted to either save your keys to the files folder of the device or upload the keys to an associated Google Drive.\nFortunately, implementing the backup key widget is painless as it is a part of the onboarding widget! If you have already implemented the onboarding widget, there’s no code you need to write!\n at_onboarding_flutter A flutter plugin project for onboarding any @sign in @protocol apps with ease. Provides QRscanner and upload key file option to authenticate.\nLearn more\nat_chat_flutter A flutter plugin project to provide chat feature using atsigns and atprotocol.\nLearn more\nat_common_flutter A flutter package to provide common widgets used by other atsign flutter packages.\nLearn more\nat_backupkey_flutter A flutter plugin project for saving backup key of any @sign that is being onboarded with @protocol apps. Backup key can used to authenticate in any @protocol apps.\nLearn more\nat_contacts_flutter A flutter plugin project to provide ease of managing contacts for an atsign using atprotocol.\nLearn more\nat_contacts_group_flutter A flutter plugin project to provide the group functionality with contacts using atprotocol.\nLearn more\nat_location_flutter A flutter plugin project to share location between two atsigns and track them on OSM (open street maps).\nLearn more\nat_events_flutter A flutter plugin project to manage events using the atprotocol.\nLearn more\n","categories":"","description":"Low level reference docs for your project.\n","excerpt":"Low level reference docs for your project.\n","ref":"/docs/functional_architecture/widgets/","tags":"","title":"Widgets"},{"body":"from pkam cram scan lookup plookup lloookup update delete notify monitor stats sync config pol ","categories":"","description":"There is a lot that goes on at the protocol level within the @platform. If you are interested in learning more about the key verbs that are in action, you can find details on how these verbs come to life.\n","excerpt":"There is a lot that goes on at the protocol level within the …","ref":"/docs/functional_architecture/verbs/","tags":"","title":"@protocol verbs"},{"body":"","categories":"","description":"Additional Resources and Content that should help you on your journey developing apps with the @platform.\n","excerpt":"Additional Resources and Content that should help you on your journey …","ref":"/docs/resources/","tags":"","title":"Resources"},{"body":" HELP WANTED! We are looking for contributors to help with language translations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and GitHub Actions to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nHere’s a quick guide to updating the docs. It assumes you’re familiar with the GitHub workflow and you’re happy to use the automated preview of your doc updates:\n Fork the atsign.dev repo on GitHub. Make your changes and send a pull request (PR). If you’re not yet ready for a review, add “WIP” to the PR name to indicate it’s a work in progress. (Don’t add the Hugo property “draft = true” to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.)   Continue updating your doc and pushing your changes until you’re happy with the content. When you’re ready for a review, add a comment to the PR, and remove any “WIP” markers.  Updating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You’ll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the atsign.dev repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the atsign.dev repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","categories":"","description":"How to contribute to the @platform developer site\n","excerpt":"How to contribute to the @platform developer site\n","ref":"/no/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":" HELP WANTED! We are looking for contributors to help with language translations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and GitHub Actions to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nHere’s a quick guide to updating the docs. It assumes you’re familiar with the GitHub workflow and you’re happy to use the automated preview of your doc updates:\n Fork the atsign.dev repo on GitHub. Make your changes and send a pull request (PR). If you’re not yet ready for a review, add “WIP” to the PR name to indicate it’s a work in progress. (Don’t add the Hugo property “draft = true” to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.)   Continue updating your doc and pushing your changes until you’re happy with the content. When you’re ready for a review, add a comment to the PR, and remove any “WIP” markers.  Updating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You’ll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the atsign.dev repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the atsign.dev repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","categories":"","description":"How to contribute to the @platform developer site\n","excerpt":"How to contribute to the @platform developer site\n","ref":"/sp/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":" HELP WANTED! We are looking for contributors to help with language translations.\n This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","categories":"","description":"","excerpt":" HELP WANTED! We are looking for contributors to help with language …","ref":"/no/docs/","tags":"","title":"Documentation"},{"body":" HELP WANTED! We are looking for contributors to help with language translations.\n This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","categories":"","description":"","excerpt":" HELP WANTED! We are looking for contributors to help with language …","ref":"/sp/docs/","tags":"","title":"Documentation"},{"body":" Our Developer program is designed to bring our community to developers the best possible tools, templates and help needed to build and launch your apps. We also help you with certifications and a commission program where you will receive a 20% commission on all @sign sales that come through your app.\n Program Goals  Create excellent, private, surveillance-free apps on the @platform Review and endorse apps via the @ certification process Provide developers with a set and forget revenue stream  How to join?  Get an @ sign, free or custom. Apply to the @dev program here. We’ll contact you to schedule a meeting to discuss the program. Read and agree to the @dev program Agreement. You can view a copy of it here.  ","categories":"","description":"Build apps that respect people’s privacy by design, thanks to the @platform. \n","excerpt":"Build apps that respect people’s privacy by design, thanks to the …","ref":"/dev_tools/","tags":"","title":"Be part of our Developer Program"},{"body":"Contributing to an Open-Source GitHub Project Overview: There are a countless number of open source projects that exist on the Internet, but just how are you meant to add anything to these? What does forking a repository mean? What is a pull request? How can you make a contribution?\nWhat is an open source project? For anyone who is new to not just software development but project management in general, an open source project is that of which any person has access to all of the details of the project and are free to utilize it, use it for research purposes, make modifications to it, and even distribute it elsewhere. GitHub of course, being one of the main wellsprings of open source projects! For the sake of this article, I will be using The @ Company’s atsign-foundation  repository to explain any examples.\nWhy would you want to contribute to an open source project? With the new, blossoming field of data science, being capable of finding your way around a GitHub project is a significantly useful skill in today’s world. You’ll find that many corporate entities will highlight your contributions to any GitHub project (as long as you have listed them within your résumé!). You’ll also find that there are many friendly developers who really appreciate the people who add modifications to the project, and especially if that modification comes with a flagged issue (there seems to be a special place in the heart of a developer for people who raise issues within their code)! There’s also this sense of great accomplishment when you can add something useful to a project, more importantly, for the projects that you use often.\nHow can you contribute to an open source project? Choosing a Project: The first step in contributing something to a project is knowing what project you will contribute to! I’d personally recommend thinking about a project or an idea you have familiarity with as this will greatly assist in understanding what the project’s purpose is.\nForking a Repository: What is forking? In simplest terms, forking a project is simply making a copy of it to your own GitHub profile. GitHub allows anyone to fork a repository and this will allow you to do whatever you please with the entire repository without making any actual changes to the real project! Imagine it as taking a picture of a tree. You can make edits to your photo to make the tree look purple or to give it a face, but you won’t make any changes to the actual tree!\nHow to Fork a Repository: First, navigate to the home page of the repository you wish to fork. Refer to the screenshot below:\nHere, you can see that I am currently within the atsign-foundation’s ‘at_demos’ repository.\nIf you look at the top right corner of the repository’s page, you’ll notice the ‘Fork’ button and a number next to it. That number represents the number of times this specific repository has been forked. Once you select the Fork button, GitHub will prompt you which repository you wish to fork to. My go-to option is typically my own profile, where it will create an entire repository under your profile name so that you may make whatever modifications you wish. After you choose what location you wish to fork to, GitHub will do all of the hard work for you. After a few seconds or so (depending on your Internet connection speed), you’ll find that the entire repository that you forked, is now copied to wherever you told GitHub to fork it! Congratulations! You’ve forked a repository!\nMake Modifications to the Repository: Now, you can do whatever your heart so desires with the project! Depending on what the project is, you may wish to clone the repository to your local machine using https/, or simply commit changes directly on your forked repository (totally your choice/preference!).\nCreating a Public Key with GitHub We recommend git cloning the repository using the SSH key option. You can set up your own public keys on GitHub quite easily. If you see below, you will see the Clone options, ‘HTTPS, SSH, and GitHub CLI’. Select the ‘SSH’ option and this will provide you a password-protected SSH key to git clone the repository.\nIn order to create a public key on your machine, open any UNIX terminal and type the command:\nssh-keygen From here, it will ask you to choose a lcoation to store the key. We suggest just clicking ‘enter’ on whatever location is chosen for you. It will then ask for a passphrase, we STRONGLY recommend clicking ‘enter’ again to not input a passphrase. After doing this, it will ask you to input the passphrase again and click ‘enter’ without inputting anything. After having successully creating the key, enter the command:\ncat ~\\.ssh\\id_rsa.pub This will print out your public key. Copy the entire thing, including the ssh in the beginning and whatever the final character is and navigate to your GitHub settings page. Within your settings, you will see a tab titled, ‘SSH and GPG keys’. Once you navigate to this page, you should see a green bottom near the top-left titled, ‘New SSH key’. Once you have clciked this and navigated to the new SSH Key page, you will have to input a name for the key as well as pasting the retrieved key copied from the above command. After you have done both of these things, you can finish with the ‘Add SSH key’ button and you will now be able to git clone in your terminal with the SSH URL.\nCreate a Pull Request: After you are satisfied with the changes you have made to the project and are confident that this change will be beneficial to include, all you now have to do is create a pull request within the project’s real repository. GitHub has made it very simple to create a pull request for comparing forks. Refer to the screenshot below:\nYou may notice, in the top left corner of the repository, you will see the ‘Pull requests’ option. After selecting this, you will be taken to the Pull Requests page. This page will show you every pull request that has been created for the specific repository. If you see below, there has been one pull request for this repository thus far.\nIf you are sure you are ready to create a new pull request, simply click the ‘New pull request’ button. This will then navigate you to the compare page. If you followed the above steps, you would want to ‘compare forks’, which will be a small hyperlink as circled below:\nThis will now change the base and head repositories that will be compared. Be sure to select the correct branch of the real project that you wish to make a pull request for. Select the same repository you forked and the correct branch as the ‘base’ repository and ‘base’ branch. You may need to contact the project leader or one of the main developers if you need assistance for which branch you need to make a pull request for. After selecting these, be very careful in selecting the repository that you forked. This will be where you had made the modifications. Select this repository as the ‘head’ repository and ‘compare’ branch.\nFrom here, you will see all of the modifications that will occur if your pull request is accepted. Once you double check all of these modifications and are confident in it, you may now select ‘Create pull request’. You may notice that mine says ‘View pull request’ but that is because I have already gone through this process and have successfully created one.\nSide note: Be sure that your contribution will be useful for those who utilize the project! If you do end up creating a pull request with your modifications, make sure that those modifications are properly documented in both the code and/or the comment section of the pull request itself.\n","categories":"","description":"","excerpt":"Contributing to an Open-Source GitHub Project Overview: There are a …","ref":"/guides/contributing-open-source-proj/","tags":"","title":""},{"body":"Step-by-Step setup of DESS in Google Cloud Platform (GCP). In this step-by-step guide I will walk you through all steps required to setup your own private DESS in GCP cloud from scratch. Please use index to skip some steps in case you have done them in other way.\nTable of contents  Pre-requisites  Registering your @sign  Sign-up for GCP account Account creation   Register your own fully qualified domain name  Register domain name with GCP. Create Cloud DNS zone       Preparing GCP instance Preparing your instance for network access  Assignment of Static IP Assignment of Domain name to your static IP Setting up Firewall   Instance setup and DESS deployment Registration of @sign in your private DESS Activation of @sign  Pre-requisites   Register Atsign at http://atsign.com Have google account Have registered Fully Qualified Domain Name (FQDN)  1. Registering your @sign  This topic is already well documents. Please follow guidance of https://atsign.com/faqs/ and register via https://atsign.com/get-an-sign/.\n2. Sign-up for GCP account  a) Account creation  If you are new to cloud like me and need to create new GCP account, I have good news! The creation is for free. As promotion all new customer will also receive 300$ as credit. That is more than enough to run multiple DESS’s for 3 months of offer validity.\nYou can register with your gmail account or create new one by clicking “Get started for free” and follow instructions to register\nOnce done with registration you will be able to login to your https://console.cloud.google.com/ And voila you have your GCP account up and running.\nb) Setting up billing  To be able to run some services you have to maintain billing account. Navigation Menu -\u003e Billing\nBy default GCP creates “My Billing Account” which you can link to your project.\nClick “Link Billing account” and select “My billing account” from drop down\n🔴 Its important to note that this account holds your 300$ free credits! 🔴\nWe are all setup and ready to go deploy!\n3. Register your own fully qualified domain name (FQDN)  This step can be performed at range of different sites with different pricing models. You can use sites like http://www.godaddy.com; https://www.namecheap.com/; and many others. Since we have GCP account we can use it to register our domain through Cloud Domain.\na) Register domain name with GCP.  In your GCP console search for Cloud Domain.\nWe first need to enable this service.\nOnce the service activates you will be presented with its dashboard.\nLets register our fully qualified domain name (FQDN) that will be used for registration of our DESS.\nClick on “Register Domain” and look for suitable name.\nReviewing pricing options of GCP .pw is their cheapest option which will work for testing. For my test case I am selecting atsign.pw with price $0.75 / month by clicking add to cart button and continue.\nNext we can select where will our DNS record be hosted. Simply select “Use Google Domains” and DNSSEC “Enabled” and click continue.\nWe have no options with Privacy protection so simply click continue.\nFill out contact details and click register. This will trigger registration email you will have to verify.\nOnce you verify your email your domain should be ready to use\nb) Create Cloud DNS zone  Next step is to enable Cloud DNS service. Search for DNS in search bar and select Cloud DNS\nIf its your first time activating this service you will have to enable the API. Press enable and wait for the activation to finish.\nLets crate new DNS zone by clicking “Create Zone”\nWe will select zone type as Public since we will be connecting to our DNS from internet and provide your registered DNS name. In my case atsign.pw. DNSSEC will be set to off and provide some meaningful Description. Once you filled all your details press create.\nYou should receive following message:\n4. Preparing GCP instance  Now since I am new to GCP the easiest way to start using it is with prebuild solutions. This way you will deploy small system which is more then capable of handling DESS at pre-set price.\nWe can use pre-build “Ubuntu 20”. In Search bar look for Ubuntu20\n🔴 Make sure to use “Ubuntu 20” and not “Hardened Ubuntu 20”. Although the Hardened version will work as well it requires additional manual steps to make work.🔴\n​\nThis will take you to this prebuild solution overview page:\nSelect launch\nAnd press enable all required API’s\nOnce all API’s are activated you are taken to configuration page:\nPrices are based on region and power of selected Virtual Machine (VM). To cost optimize you can select US region / N1 / g1-small at cost of $15/Month.\nNext up is boot disk which we can leave as is.\nThis will deploy your Ubuntu 20.04 virtual machine.\n5. Preparing your instance for network access  a) Assignment of Static IP  Next up our list of activities is providing our instance with static IP and linking our domain to it.\nGCP assigned ephemeral IP address to our newly created VM. We need to change it to static IP.\nIn search bar look for External IP addresses.\nYou should see your external IP address assigned to your VM\nIn column Type select ephemeral and change it to Static\nGive your static IP name and some description.\nType should now say Static\nb) Assignment of Domain name to your static IP  Next step is to point your domain to your virtual machine running DESS.\nSearch for Cloud DNS\nOpen zone you have created in step 3.b Create Cloud DNS zone\nWe now need to link A type record to your domain linking it to IP address of your Virtual machine.\nThis is done simply press “Add record set”\nSelect Resource record type “A” and IPv4 address the address of your DESS virtual machine.\nIf everything goes well you should see following in your domain dashboard:\nNext step is to update Google Name servers. You can follow Googles guide - step 5.\nhttps://cloud.google.com/dns/docs/tutorials/create-domain-tutorial#register-domain\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address.\nAt this point we have created DNS record we will use to link our DESS, we created instance name which will be running our DESS and we have opened port range which is exposed to the internet and we can communicate with @sign root server and our apps with.\nc) Setting up Firewall  Search for Firewall in search bar.\nClick on Create firewall rule\nLets create firewall rule that will enable the @sign root server communicate with our DESS.\nImportant things to note:\n  Ingress translates to incoming traffic.\n  Selecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\n  For my use case I will enable port range 8000 – 8010 allowing me to register up to 10 @signs.\n  Press create and validate that your new rule appears in list of firewall rules.\nSecond we need to create firewall rule that will enable your DESS server to communicate with certification authority.\nImportant things to note:\n  Ingress translates to incoming traffic.\n  Selecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\n  You need to enable port 80 for communication with Certification authority.\n  Press create and validate that your new rule appears in list of firewall rules.\n6. Instance setup and DESS deployment  Open your GCP console at https://console.cloud.google.com/compute/instances and search for VM instances\nBy now you should see your instance in “Running state”\nClick on the SSH button and connect to your instance.\nYou should be presented by new window with command line:\nBefore we do anything we run update:\nsudo apt update \u0026\u0026 sudo apt upgrade\nThis might take some time, but it will make sure we have latest repository information and the system is up to date and secure.\nNext up we need to make sure Git is installed. This can be done with following command:\nsudo apt install git\nWe are now set to download latest copy of the DESS through Git. I am following guide prepared by Colin\nhttps://github.com/atsign-foundation/dess/tree/dess.0.0.1-release.1\nRun to download fresh copy of the DESS\ngit clone --branch dess.0.0.1-release.1 https://github.com/atsign-foundation/dess.git\nLets navigate to DESS folder that was created and run installation scripts:\ncd dess\n./install_software.sh\nAt the end you should be presented with message:\nAt this point we are good to go with registering our first @sign in our private DESS running in cloud with our own FQDN!\n7. Registration of @sign in your private DESS  At this step you should already have your at sign registered at http://atsign.com. If not go do it!\nI have registered my own free @sign @44likelycanary which I will link to my GCP cloud private DESS.\nIn your instance console navigate to DESS folder. If you were following this guide it will be located in:\ncd /home/\u003cusername\u003e/dess where username is your email address without domain. In my case atsigntest\nWe now need to create service hosting our @sign on our DESS by executing ./create.sh script\nIn my case the command will look as following:\n./create.sh @44likelycanary atsign.pw 8000 \u003cemail address\u003e likelycanary\nTo make it more understandable:\nI will be registering my @sing @44likelycanary \nI will be using my domain atsign.pw which I have registered through GCP\nI am using port 8000 which I have opened in my instance firewall\nMy registration email address is \u003cemail address\u003e.\nThe last likelycanary is name which will be used by docker to register my service.\nIf everything is successful you should see output like this:\nAt this moment your atsign is registered on your DESS.\n8. Activation of @sign Next up we need to activate it\nLogin to your dashboard at https://my.atsign.com/dashboard\nOpen “my @signs”\nOpen “managed” of @sign you are registering”\nNavigate to Advance settings:\nIf you have already activated your @sign you will be prompted to erase all your data first\nOnce done you are able to link your @sign with your private DESS. Use your domain and port number with which you have created service on your cloud instance and press Activate\nYou should see that your @sign is being activated in your dashboard:\nThe activation will be completed once you have used your QR code from DESS and retrieved your keys.\nOnce the activation process completes you are welcomed by green Activated.\nCONGRATULATIONS\n","categories":"","description":"","excerpt":"Step-by-Step setup of DESS in Google Cloud Platform (GCP). In this …","ref":"/guides/dess-gcp/","tags":"","title":""},{"body":"Working With Hugo (Static Webpage Generator) Overview: Hugo, an open-source static website generator, is a new way to create web pages easily with flexible thematic capabilities. How do you get started with it and how can you go from beginner to confident?\nWhat is Hugo? Hugo is a static site generator that can be seen as a competitor for WordPress and Bootstrap. The best part about Hugo that differentiates it from its competitors is that it is an open-source project, which means it’s free to use! Hugo also makes content management a headache-free, comprehensive process! Hugo can be incredible for this type of content management due to not even needing to write HTML if web development is not something you’re comfortable with! If you are the type who really enjoys getting your hands dirty, Hugo’s flexibility expands to allowing developers to completely modify everything about their own static web page. Now what’s a static web page? You can pretty much sum it up to be a hard-coded page of information that, of course, does not change dynamically. The best advantage that static web pages have over dynamic web pages is the extreme difference in speed. Because most dynamic websites are producing content for the individual visitor, it can take much longer to produce the content.\nThere’s a growing community behind Hugo with numerous Stack Overflow locations with any questions relevant to that of Hugo. Getting Started with Hugo:\nWindows: Installing Hugo on Windows: There are a few ways in which you can get started with Hugo, however the easiest way I have found to getting started and jumping straight into things is by the following steps:\nCreate a directory in a location on your drive. For me, I have more storage capacity within my D: drive so I navigate to my D: drive within my File Explorer and simply right click and select ‘Folder’. This will create a new folder wherever you were within your drive. Next, rename this folder to ‘Hugo’. After this, navigate inside of your Hugo folder and create another folder within it, this time calling it ‘bin’.\nYou’re now ready to download Hugo on to your machine. As most projects which are open-source can be found on GitHub, so can Hugo’s releases. In any web browser, navigate to the GoHugoIo repository. Here, you will find a great list of all of the releases catered for Windows, Linux, and MacOS. Be sure to select a release that has your operating system in the title. For example, I am using a Windows 10 machine that runs a 64 bit processor. So I navigated to the zip file titled hugo_extended_0.83.1_Windows-64bit.zip. (Note: the release number may be different from the one listed above due to the time at which I have written this document. You may also noticed that I have chosen the extended Hugo version. Hugo extended has more capabilities, especially for thematic purposes. Hugo’s extension comes with a few advantages such as; SASS/SCSS support, Minify javascript and css, resource catenation, source mapping, image processing and so much more. A more in depth view of it can be found here.\nOnce you have found the matching release title for your machine, feel free to simply download the zip file. Where you download the zip file does not matter, however, where you extract it does. When your download is complete, select ‘Extract all’ and be sure that you extract the contents of what you downloaded into the ‘bin’ folder that exists within your Hugo folder. Once the extraction is complete, it should look something like this:\nFor the release that I have downloaded and extracted, there are three files. Perhaps in a later release of Hugo, there may be more files included, but for now, as long as you have the application file titled ‘hugo’, you will be fine. If, for whatever odd reason, the ‘hugo’ file is titled something else, be sure to rename it to ‘hugo’ (note the lowercase ‘h’). There is also a license file and a readme. It is completely up to you if you read the readme and license files.\nDetermining if your Installation on Windows was successful:\nApologies in advance for MacOS and Linux users as I will be demonstrating the following steps using a Windows 10 machine. A later edit with both MacOS and Linux will be created to cater those who wish to learn from a separate operating system. To make sure that your Hugo was successfully installed and extracted, open your command prompt [Some ways in which this can be done =\u003e (Win key + r, type ‘cmd’, hit ‘enter’), (Go to your Search bar and the bottom of your taskbar and type in ‘cmd’ or ‘command prompt’ and hit ‘enter’)] and navigate to the directory where you extracted Hugo. For the above picture, my hugo.exe file’s location was D:\\Hugo\\bin\\hugo.exe, so all I have to type is ‘cd D:\\Hugo\\bin’ and I will be taken to where the hugo.exe exists. If you’re not sure where you had saved your Hugo folder, you can either use the File Explorer you have presently open and simply highlight the path that is in the bar above your currently open Hugo folder. I have circled it below for your convenience.\nTo show what your command prompt should look like: Once you are here, feel free to try the command ‘hugo version’: If your command prompt happily prints out the current version of Hugo you have on your machine, this means you have successfully installed and extracted Hugo onto your machine. However, you may notice that if you use the command ‘cd ..’ to move directories to the ‘Hugo’ folder rather than ‘bin’ and try the command ‘hugo version’ you will be hit with an error or Windows will tell you that hugo isn’t a recognized command. If you are like me, and wish to be capable of using the hugo command anywhere on your machine, maybe because you would like to create a web page with its own folder and its own content, there is an easy way to fix this.\nWhat you will have to do is navigate to your ‘Search’ bar and type in ‘env’ or ‘environment’. Windows will suggest the ‘Edit the System Environment Variables’. Open it and a System Properties dialog box should appear and look something like this: Double-click on the button labeled ‘Environment Variables’ and this will open the dialog box where you can edit the environment variables of your machine. You may be wondering what environment variables are and what they’re for. In simplest terms, just like how you noticed that your hugo command did not work outside of the bin folder, there are other applications that work the same way and will only work in the folder they exist in. Windows has the capability of allowing you to run the application from anywhere, which is exactly what we would like to do. You should see something in your ‘user variables’ called Path. Each Path that is listed, is more than likely an application, similar to your Hugo, that exists only in a folder but is used globally on your machine. Highlight ‘Path’ and click ‘Edit…’. This will open a new dialog box that will list the individual paths that already exist. Click ‘New’ and simply type (or paste) the location of your hugo.exe. If you may recall from my example, my hugo.exe was in the following location; D:\\hugo_ext\\bin.\nHere’s what mine looks like after I have finished typing in where it exists (it is the one highlighted in blue). After you have done the same, you can now click ‘OK’ until all of the dialog boxes are closed. Now this is where the magic happens! After restarting your computer, try using the ‘hugo version’ command again outside of the ‘Hugo\\bin’ folder and see if Windows recognizes it as a command! I simply started up my command prompt and immediately typed in ‘hugo version’ and it worked. If the command works, you are now ready to get started on a Hugo project.\nMac: Installing Hugo on Mac: The first step you will want to take is navigating to the website Homebrew. This website is a package manager and allows you to install, download and manage packages. You can use Homebrew to install Hugo easily on your computer. Once you are taken to the landing page, you should come across a terminal command that looks like:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" // NOTE: // This command may be updated depending on any new releases, // so be sure to check the website before copying the line of code above!\nSimply paste the line of code into your terminal. Once you click enter and input your password for administrative access, Homebrew will begin installing itself onto your machine. This can take a few minutes.\tOnce Homebrew is finished, you can then type the command:\nbrew install hugo Homebrew may update itself automatically before installing hugo.\nDetermining if your Installation on Windows was successful: You can validate your install by the command:\nwhich hugo You can also use the command:\nhugo version If you run into an error, proceed through the Windows steps and follow the instructions up until the GitHub section where you manually install the package from the repository for your own machine.\nCreating a Hugo project: Depending on your operating system, open your command prompt/terminal. You can also launch an IDE of your preference and have the terminal open within it. To create a new hugo project, be sure that you are within a directory that you would want to have your Hugo project created in. For this article, I will create a new folder within my D: drive (Windows) and then use the command:\nhugo new site your_name_here Refer to the steps within my command prompt below: I first check that my hugo command works, change directory into my D: drive, create a new folder called, ‘my_hugo_site’, navigate into that folder, and then create a new Hugo site called, ‘my_hugo_project’.\nIf you receive the ‘Congratulations!’ message, this means that you have successfully created a new Hugo site. If you expand the project folder to see its contents, you will see that a few folders have been created. (Be sure that you navigate within your newly created project first!)\nThe number of folders created here may seem a bit overwhelming, but have no fear! We will go over what each folder is for.\nArchetypes: The first folder is the ‘archetypes’ folder. This folder is typically used by those more confident with Hugo. An archetype, in its simplest form, is simply a constant that occurs throughout all of the content of your website, something that will not change. With Hugo, you can manually create data about your site (for you Computer Scientists, that’s metadata!). What this means is that you can assign values to things that will not be changing. This could mean, who initially created the website, what date it was created, what information populates the site itself, and etc.\nContent: A very self explanatory folder, this is where the main content of your site will exist.\nData: You can almost view this as your website’s own database which can house .json files and allows you to utilize information that exists within external pieces.\nLayouts: Just like a word document, if you wish to add information within the same location of every page that exists on your website, such as a header or a footer, this is where you would add that.\nStatic: This is, of course, where your static elements will exist. These elements may include your javascript or css files.\nconfig.toml: This file contains the settings of your website, such as its URL, what language it contains, and the title of the website.\nThemes: If graphic design isn’t one of your strengths, Hugo being an open-source project means that there are countless persons releasing their own themes and layouts for you to use! You can browse these themes here. Installing a theme is just as simple as downloading a folder to your machine, because that is exactly what you are doing! You may notice that every theme which peaks your interest will also exist on GitHub. You can use whatever method you prefer to retrieve the code. In this document, I will demonstrate a couple ways to do this. Once you find a theme that suits your needs or ‘aesthetic’, simply click on the theme. You may see two or three buttons, ‘Download’, ‘Demo’, ‘Homepage’. If you are confident that this is the theme you want, click ‘Download’ and it will take you to the GitHub repository where the theme exists. Click on the green ‘Code’ button and this will give you a few options on how to retrieve the code.\nFor this example, I have found a theme that interests me titled ‘Dream’. For users who have Git, you can copy the https link and navigate into the ‘themes’ folder of your project to git clone it. Refer to the screenshot below (I am using Git Bash):\nWhen you clone the repository, it will automatically create a folder for you. However, if you are not sure how to use Git, you can simply download the Zip file onto your machine. Before installing this zip folder, be sure to create a folder within your ‘themes’ folder with the appropriate title of the theme you are downloading. After downloading the zip folder, you should extract the contents into the folder that you just created inside of your ‘themes’ folder. You can see in the screenshot below, that the folder ‘hugo-theme-dream’ exists within the ‘themes’ folder.\nAfter successfully implementing the above steps, navigate into your config.toml file and add the line of code below everything else that exists in the file:\ntheme = “folder_name_here” So, in my case, I would type the following:\ntheme = “hugo-theme-dream” After adding this line, save the document and to make sure that you have properly called this theme into your site use the following command in your command prompt/terminal to start up your Hugo local server:\nhugo server -D The -D will launch all of the draft pages that exist within your project folder.\nAfter this, you can now open any web browser and type in the URL:\nlocalhost:1313\nYou should now see your website and the theme you installed! From here, if you wish to contrbute, I recommend reading through our ‘Contributing to an Open-Source Project’ document!\nSteps for Setting up our hugo dev site on your machine   Since I have already created a fork of the atsign.dev repo, all I simply have to do is fetch the upstream for any recent changes made.\n  I then proceed to git pull the updated forked repo (or if you haven’t already simply git clone it).\n  You now need to edit the config.toml file so that your theme = “at_docsy”\n  Get the https:// link from the at_docsy repo on our GitHub\n  If you are using Git Bash all you have to do is navigate within the atsign.dev folder that contains the folders; content, archetypes, assets, etc. and use the command:\n  git submodule add \"https://github.com/atsign-foundation/at_docsy.git\" themes/at_docsy This command will pull the at_docsy repo’s contents and add them to a created folder titled at_docsy under your themes folder\nFinally, use the command below and you will be ready to use the hugo commands:  git submodule update --init --recursive ","categories":"","description":"","excerpt":"Working With Hugo (Static Webpage Generator) Overview: Hugo, an …","ref":"/guides/getting-started-with-hugo/","tags":"","title":""},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_huf0df68fa04a014a242f388f060bd4f10_258359_960x540_fill_catmullrom_top_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_huf0df68fa04a014a242f388f060bd4f10_258359_1920x1080_fill_catmullrom_top_2.png); } }  Fastest way to build end-to-end encrypted apps Welcome to the @platform!\nLearn More   GitHub        Get your Flutter Apps to life quick \u0026 easy!  Placeholder140x140 No Infrastructure needed  The @platform does all the infrastructure and backend work for you Placeholder140x140 Privacy built-in by Default  Both you and your consumers dont have to break a sweat worrying about data Placeholder140x140 Super Quick Onboarding  If you know Flutter \u0026 Dart,the learning curve is super easy   What is the @platform?    Need new video to be created to introduce the platfrom   New to our @platform?  Hear from our Developer community  Developer quotes and experiences\n Placeholder   Check out the apps built on the @platform  Apps showcase\n Placeholder   Want to talk to us?   Point to the different platforms  Placeholder       Contributions welcome!  We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n   Follow us on Twitter!  Keep up on live stream events, latest feature updatess and more on Twitter.\n   Join us on Discord!  Join the growing community of developers talking with each other on Discord.\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"@developer"},{"body":"  HELP WANTED! We are looking for contributors to help with language translations.     ","categories":"","description":"","excerpt":"  HELP WANTED! We are looking for contributors to help with language …","ref":"/no/","tags":"","title":"@developer"},{"body":"  HELP WANTED! We are looking for contributors to help with language translations.     ","categories":"","description":"","excerpt":"  HELP WANTED! We are looking for contributors to help with language …","ref":"/sp/","tags":"","title":"@developer"},{"body":" Events      Advisors     ","categories":"","description":"","excerpt":" Events      Advisors     ","ref":"/community/","tags":"","title":"Community"},{"body":"As the heart of the @platform, we developed the @protocol in Dart, a powerful language that can be used to develop mobile apps with Flutter, Google’s increasingly popular UI software framework. If you are new to Flutter or Dart, no problem! Many of our first developers knew nothing about these languages coming in. For guidance on Flutter installation and development, please visit flutter.dev. Regardless of your coding knowledge, we recommend that you begin with “Getting Started.”\nWelcome to the @protocol: Our Co-Founder and CTO, Colin Constable, has a message for you!\n Where should I go next?  Getting Started: Get started with setting up your machine!  ","categories":"","description":"","excerpt":"As the heart of the @platform, we developed the @protocol in Dart, a …","ref":"/docs/","tags":"","title":"Before you start your @platform journey"},{"body":"","categories":"","description":"","excerpt":"","ref":"/guides/","tags":"","title":"Guides"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"  #td-cover-block-0 { background-image: url(/showcase/featured-background_huf0df68fa04a014a242f388f060bd4f10_258359_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/showcase/featured-background_huf0df68fa04a014a242f388f060bd4f10_258359_1920x1080_fill_catmullrom_bottom_2.png); } }  Apps made by you, for you Privacy included, of course\n        @wavi  Your space on the Privacy-First web.  Learn more wavi.ng      @buzz  An entirely new way to connect — privacy included.  Learn more      @spacesignal   Coming soon!  An online chatting app that allows for making new connections and conversations with like minded people on common topics of interest.  Learn more      @mosphere  Peer-to-peer encrypted file sharing has never been easier  Learn more Open-Source Code      Take @ Vote   Coming soon!  A private and secure voting platform  Learn more      @rrive   Coming soon!  A location sharing app that utilizes the @location package that allows @signs to securely share their locations.  Learn more Open-Source Code     Learn More    --     Contributions welcome!  We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n   Follow us on Twitter!  Keep up on live stream events, latest feature updatess and more on Twitter.\n   Join us on Discord!  Join the growing community of developers talking with each other on Discord.\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/showcase/","tags":"","title":"Showcase"}]